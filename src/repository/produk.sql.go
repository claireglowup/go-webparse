// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: produk.sql

package repository

import (
	"context"
)

const deleteProduk = `-- name: DeleteProduk :exec
DELETE FROM produk
WHERE id_produk = $1
`

func (q *Queries) DeleteProduk(ctx context.Context, idProduk string) error {
	_, err := q.db.ExecContext(ctx, deleteProduk, idProduk)
	return err
}

const getAllProduct = `-- name: GetAllProduct :many
SELECT produk.id_produk,produk.nama_produk,produk.harga,kategori.nama_kategori,status.nama_status
FROM produk
JOIN status ON produk.status_id = status.id_status
JOIN kategori ON produk.kategori_id = kategori.id_kategori
WHERE status.nama_status = 'bisa dijual'
`

type GetAllProductRow struct {
	IDProduk     string `json:"id_produk"`
	NamaProduk   string `json:"nama_produk"`
	Harga        string `json:"harga"`
	NamaKategori string `json:"nama_kategori"`
	NamaStatus   string `json:"nama_status"`
}

func (q *Queries) GetAllProduct(ctx context.Context) ([]GetAllProductRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllProductRow{}
	for rows.Next() {
		var i GetAllProductRow
		if err := rows.Scan(
			&i.IDProduk,
			&i.NamaProduk,
			&i.Harga,
			&i.NamaKategori,
			&i.NamaStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProduct = `-- name: GetProduct :one
SELECT produk.id_produk,produk.nama_produk,produk.harga,kategori.nama_kategori,status.nama_status
FROM produk
JOIN status ON produk.status_id = status.id_status
JOIN kategori ON produk.kategori_id = kategori.id_kategori
WHERE produk.id_produk = $1
`

type GetProductRow struct {
	IDProduk     string `json:"id_produk"`
	NamaProduk   string `json:"nama_produk"`
	Harga        string `json:"harga"`
	NamaKategori string `json:"nama_kategori"`
	NamaStatus   string `json:"nama_status"`
}

func (q *Queries) GetProduct(ctx context.Context, idProduk string) (GetProductRow, error) {
	row := q.db.QueryRowContext(ctx, getProduct, idProduk)
	var i GetProductRow
	err := row.Scan(
		&i.IDProduk,
		&i.NamaProduk,
		&i.Harga,
		&i.NamaKategori,
		&i.NamaStatus,
	)
	return i, err
}

const getProductForUpdate = `-- name: GetProductForUpdate :one
SELECT status.id_status,kategori.id_kategori
FROM produk
JOIN status ON produk.status_id = status.id_status
JOIN kategori ON produk.kategori_id = kategori.id_kategori
WHERE produk.id_produk = $1
`

type GetProductForUpdateRow struct {
	IDStatus   string `json:"id_status"`
	IDKategori string `json:"id_kategori"`
}

func (q *Queries) GetProductForUpdate(ctx context.Context, idProduk string) (GetProductForUpdateRow, error) {
	row := q.db.QueryRowContext(ctx, getProductForUpdate, idProduk)
	var i GetProductForUpdateRow
	err := row.Scan(&i.IDStatus, &i.IDKategori)
	return i, err
}

const insertProduct = `-- name: InsertProduct :one
INSERT INTO produk (
    id_produk,
    nama_produk,
    harga,
    kategori_id,
    status_id
) VALUES (
    $1,$2,$3,$4,$5
) RETURNING id_produk, nama_produk, harga, kategori_id, status_id
`

type InsertProductParams struct {
	IDProduk   string `json:"id_produk"`
	NamaProduk string `json:"nama_produk"`
	Harga      string `json:"harga"`
	KategoriID string `json:"kategori_id"`
	StatusID   string `json:"status_id"`
}

func (q *Queries) InsertProduct(ctx context.Context, arg InsertProductParams) (Produk, error) {
	row := q.db.QueryRowContext(ctx, insertProduct,
		arg.IDProduk,
		arg.NamaProduk,
		arg.Harga,
		arg.KategoriID,
		arg.StatusID,
	)
	var i Produk
	err := row.Scan(
		&i.IDProduk,
		&i.NamaProduk,
		&i.Harga,
		&i.KategoriID,
		&i.StatusID,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE produk
SET nama_produk = $1, 
    harga = $2
WHERE id_produk = $3
`

type UpdateProductParams struct {
	NamaProduk string `json:"nama_produk"`
	Harga      string `json:"harga"`
	IDProduk   string `json:"id_produk"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct, arg.NamaProduk, arg.Harga, arg.IDProduk)
	return err
}
